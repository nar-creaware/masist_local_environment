apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - env:
        - name: discovery.type
          value: single-node
        - name: ES_JAVA_OPTS
          value: -Xms512m -Xmx512m
        image: docker.elastic.co/elasticsearch/elasticsearch:8.15.3
        name: elasticsearch
        ports:
        - containerPort: 9200
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: esdata
      volumes:
      - hostPath:
          path: /usr/share/elasticsearch/data
        name: esdata
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
spec:
  ports:
  - name: elasticsearch-port-1
    port: 9200
    protocol: TCP
    targetPort: 9200
  selector:
    app: elasticsearch
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - env: []
        image: docker.elastic.co/logstash/logstash:8.15.3
        name: logstash
        ports:
        - containerPort: 5044
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /usr/share/logstash/config
          name: logstashconfig
        - mountPath: /usr/share/logstash/pipelines
          name: logstashpipelines
      volumes:
      - hostPath:
          path: /usr/share/logstash/config
        name: logstashconfig
      - hostPath:
          path: /usr/share/logstash/pipelines
        name: logstashpipelines
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
spec:
  ports:
  - name: logstash-port-1
    port: 5044
    protocol: TCP
    targetPort: 5044
  selector:
    app: logstash
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
      - env:
        - name: ELASTICSEARCH_HOSTS
          value: http://elasticsearch:9200
        image: docker.elastic.co/kibana/kibana:8.15.3
        name: kibana
        ports:
        - containerPort: 5601
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts: []
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
spec:
  ports:
  - name: kibana-port-1
    port: 5601
    protocol: TCP
    targetPort: 5601
  selector:
    app: kibana
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - env: []
        image: redis:latest
        name: redis
        ports:
        - containerPort: 6379
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts: []
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
  - name: redis-port-1
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: redis
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redisinsight
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redisinsight
  template:
    metadata:
      labels:
        app: redisinsight
    spec:
      containers:
      - env:
        - name: REDIS_HOST
          value: redis
        - name: REDIS_PORT
          value: '6379'
        image: redis/redisinsight:latest
        name: redisinsight
        ports:
        - containerPort: 5540
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts: []
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: redisinsight
spec:
  ports:
  - name: redisinsight-port-1
    port: 5540
    protocol: TCP
    targetPort: 5540
  selector:
    app: redisinsight
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - env: []
        image: prom/prometheus:latest
        name: prometheus
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheusprometheusyml
      volumes:
      - hostPath:
          path: /etc/prometheus/prometheus.yml
        name: prometheusprometheusyml
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  ports:
  - name: prometheus-port-1
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: prometheus
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: admin
        image: grafana/grafana:latest
        name: grafana
        ports:
        - containerPort: 3000
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts: []
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  ports:
  - name: grafana-port-1
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: grafana
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - env:
        - name: RABBITMQ_DEFAULT_USER
          value: guest
        - name: RABBITMQ_DEFAULT_PASS
          value: guest
        image: rabbitmq:3-management
        name: rabbitmq
        ports:
        - containerPort: 5672
        - containerPort: 15672
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts: []
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
spec:
  ports:
  - name: rabbitmq-port-1
    port: 5672
    protocol: TCP
    targetPort: 5672
  - name: rabbitmq-port-2
    port: 15672
    protocol: TCP
    targetPort: 15672
  selector:
    app: rabbitmq
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: ''
        - name: ZOOKEEPER_TICK_TIME
          value: ''
        image: confluentinc/cp-zookeeper:latest
        name: zookeeper
        ports:
        - containerPort: 2181
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts: []
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  ports:
  - name: zookeeper-port-1
    port: 2181
    protocol: TCP
    targetPort: 2181
  selector:
    app: zookeeper
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - env:
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: ''
        - name: KAFKA_ADVERTISED_LISTENERS
          value: ''
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: ''
        image: confluentinc/cp-kafka:latest
        name: kafka
        ports:
        - containerPort: 9092
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts: []
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  ports:
  - name: kafka-port-1
    port: 9092
    protocol: TCP
    targetPort: 9092
  selector:
    app: kafka
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - env:
        - name: POSTGRES_USER
          value: ''
        - name: POSTGRES_PASSWORD
          value: ''
        - name: POSTGRES_DB
          value: ''
        image: postgres:latest
        name: postgres
        ports:
        - containerPort: 5432
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: pgdata
      volumes:
      - hostPath:
          path: /var/lib/postgresql/data
        name: pgdata
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
  - name: postgres-port-1
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
      - env:
        - name: PGADMIN_DEFAULT_EMAIL
          value: ''
        - name: PGADMIN_DEFAULT_PASSWORD
          value: ''
        image: dpage/pgadmin4
        name: pgadmin
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /pgadmin4/servers.json
          name: pgadminserversjson
      volumes:
      - hostPath:
          path: /pgadmin4/servers.json
        name: pgadminserversjson
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
spec:
  ports:
  - name: pgadmin-port-1
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: pgadmin
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudbeaver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloudbeaver
  template:
    metadata:
      labels:
        app: cloudbeaver
    spec:
      containers:
      - env:
        - name: CB_SERVER_NAME
          value: My CloudBeaver Server
        image: dbeaver/cloudbeaver:latest
        name: cloudbeaver
        ports:
        - containerPort: 8088
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /opt/cloudbeaver/workspace
          name: cloudbeaverworkspace
      volumes:
      - hostPath:
          path: /opt/cloudbeaver/workspace
        name: cloudbeaverworkspace
---
apiVersion: v1
kind: Service
metadata:
  name: cloudbeaver
spec:
  ports:
  - name: cloudbeaver-port-1
    port: 8088
    protocol: TCP
    targetPort: 8088
  selector:
    app: cloudbeaver
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mssql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mssql
  template:
    metadata:
      labels:
        app: mssql
    spec:
      containers:
      - env:
        - name: ACCEPT_EULA
          value: Y
        - name: SA_PASSWORD
          value: YourStrong@Passw0rd
        image: mcr.microsoft.com/mssql/server:2022-latest
        name: mssql
        ports:
        - containerPort: 1433
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /var/opt/mssql
          name: mssqldata
      volumes:
      - hostPath:
          path: /var/opt/mssql
        name: mssqldata
---
apiVersion: v1
kind: Service
metadata:
  name: mssql
spec:
  ports:
  - name: mssql-port-1
    port: 1433
    protocol: TCP
    targetPort: 1433
  selector:
    app: mssql
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: filebeat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: filebeat
  template:
    metadata:
      labels:
        app: filebeat
    spec:
      containers:
      - env:
        - name: ELASTICSEARCH_HOSTS
          value: http://elasticsearch:9200
        image: docker.elastic.co/beats/filebeat:8.15.2
        name: filebeat
        ports: []
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /usr/share/filebeat/filebeat.yml
          name: filebeatfilebeatyml
        - mountPath: /var/logs/
          name: clogs
      volumes:
      - hostPath:
          path: /usr/share/filebeat/filebeat.yml
        name: filebeatfilebeatyml
      - hostPath:
          path: /var/logs/
        name: clogs
---
apiVersion: v1
kind: Service
metadata:
  name: filebeat
spec:
  ports:
  - name: filebeat-port
    port: 5044
    protocol: TCP
    targetPort: 5044
  selector:
    app: filebeat
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      containers:
      - env:
        - name: SONAR_JDBC_URL
          value: jdbc:postgresql://postgres:5432/postgres
        - name: SONAR_JDBC_USERNAME
          value: admin
        - name: SONAR_JDBC_PASSWORD
          value: admin
        image: sonarqube:latest
        name: sonarqube
        ports:
        - containerPort: 9000
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts: []
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube
spec:
  ports:
  - name: sonarqube-port-1
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: sonarqube
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
    spec:
      containers:
      - env:
        - name: COLLECTOR_ZIPKIN_HTTP_PORT
          value: '9411'
        image: jaegertracing/all-in-one:1.62.0
        name: jaeger
        ports:
        - containerPort: 5775
        - containerPort: 6831
        - containerPort: 6832
        - containerPort: 5778
        - containerPort: 16686
        - containerPort: 14268
        - containerPort: 14250
        - containerPort: 9411
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts: []
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger
spec:
  ports:
  - name: jaeger-port-1
    port: 5775
    protocol: TCP
    targetPort: 5775
  - name: jaeger-port-2
    port: 6831
    protocol: TCP
    targetPort: 6831
  - name: jaeger-port-3
    port: 6832
    protocol: TCP
    targetPort: 6832
  - name: jaeger-port-4
    port: 5778
    protocol: TCP
    targetPort: 5778
  - name: jaeger-port-5
    port: 16686
    protocol: TCP
    targetPort: 16686
  - name: jaeger-port-6
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: jaeger-port-7
    port: 14250
    protocol: TCP
    targetPort: 14250
  - name: jaeger-port-8
    port: 9411
    protocol: TCP
    targetPort: 9411
  selector:
    app: jaeger
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apm-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apm-server
  template:
    metadata:
      labels:
        app: apm-server
    spec:
      containers:
      - env:
        - name: output.elasticsearch.hosts
          value: '["elasticsearch:9200"]'
        - name: apm-server.host
          value: '"0.0.0.0:8200"'
        image: docker.elastic.co/apm/apm-server:8.15.3
        name: apm-server
        ports:
        - containerPort: 8200
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts: []
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  name: apm-server
spec:
  ports:
  - name: apm-server-port-1
    port: 8200
    protocol: TCP
    targetPort: 8200
  selector:
    app: apm-server
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opentelemetry-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opentelemetry-collector
  template:
    metadata:
      labels:
        app: opentelemetry-collector
    spec:
      containers:
      - env:
        - name: LOG_LEVEL
          value: debug
        image: otel/opentelemetry-collector:latest
        name: opentelemetry-collector
        ports:
        - containerPort: 4317
        - containerPort: 4318
        - containerPort: 55681
        - containerPort: 8888
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - mountPath: /etc/otel-collector-config.yaml
          name: otelcollectorconfigyaml
      volumes:
      - hostPath:
          path: /etc/otel-collector-config.yaml
        name: otelcollectorconfigyaml
---
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-collector
spec:
  ports:
  - name: opentelemetry-collector-port-1
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: opentelemetry-collector-port-2
    port: 4318
    protocol: TCP
    targetPort: 4318
  - name: opentelemetry-collector-port-3
    port: 55681
    protocol: TCP
    targetPort: 55681
  - name: opentelemetry-collector-port-4
    port: 8888
    protocol: TCP
    targetPort: 8888
  selector:
    app: opentelemetry-collector
  type: ClusterIP
